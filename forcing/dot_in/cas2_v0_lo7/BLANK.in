!
!  ROMS/TOMS Standard Input parameters.
!
!svn $Id: ocean_upwelling.in 719 2014-03-13 22:25:13Z arango $
!========================================================= Hernan G. Arango ===
!  Copyright (c) 2002-2014 The ROMS/TOMS Group                                !
!    Licensed under a MIT/X style license                                     !
!    See License_ROMS.txt                                                     !
!==============================================================================


! Application title.

       TITLE = First LiveOcean input file

! C-preprocessing Flag.

    MyAppCPP = $EX_NAME$

! Input variable information file name.  This file needs to be processed
! first so all information arrays can be initialized properly.

     VARNAME = $roms_dir$$roms_name$/ROMS/External/varinfo.dat
     

! Number of nested grids.

      Ngrids =  2

! Number of grid nesting layers.  This parameter is used to allow refinement
! and composite grid combinations.

  NestLayers =  2

! Number of grids in each nesting layer [1:NestLayers].

GridsInLayer =  1 1

! Grid dimension parameters. See notes below in the Glossary for how to set
! these parameters correctly.

          Lm == $ncols$ $ncols_a$          ! Number of I-direction INTERIOR RHO-points
          Mm == $nrows$ $nrows_a$           ! Number of J-direction INTERIOR RHO-points
           N == $nlayers$ $nlayers_a$            ! Number of vertical levels

        Nbed =  0             ! Number of sediment bed layers

         NAT =  2             ! Number of active tracers (usually, 2)
         NPT =  0             ! Number of inactive passive tracers
         NBT =  9             ! Number of biology tracers
         NCS =  0             ! Number of cohesive (mud) sediment tracers
         NNS =  0             ! Number of non-cohesive (sand) sediment tracers

! Domain decomposition parameters for serial, distributed-memory or
! shared-memory configurations used to determine tile horizontal range
! indices (Istr,Iend) and (Jstr,Jend), [1:Ngrids].

      NtileI == $ntilei$ $ntilei_a$                              ! I-direction partition
      NtileJ == $ntilej$ $ntilej_a$                              ! J-direction partition

!                   W       S       E       N
!                   e       o       a       o
!                   s       u       s       r
!                   t       t       t       t
!                           h               h
!
!                   1       2       3       4
   LBC(isFsur) ==   Cha     Cha     Clo     Clo \        ! free-surface
                    Nes     Nes     Nes     Nes         !  Grid 2
   LBC(isUbar) ==   Fla     Fla     Clo     Clo \        ! 2D U-momentum
                    Nes     Nes     Nes     Nes         !  Grid 2
   LBC(isVbar) ==   Fla     Fla     Clo     Clo \        ! 2D V-momentum
                    Nes     Nes     Nes     Nes         !  Grid 2
   LBC(isUvel) ==   RadNud     RadNud     Clo     Clo \    ! 3D U-momentum
                    Nes     Nes     Nes     Nes         !  Grid 2
   LBC(isVvel) ==   RadNud     RadNud     Clo     Clo \    ! 3D V-momentum
                    Nes     Nes     Nes     Nes         !  Grid 2
   LBC(isMtke) ==   RadNud     RadNud     Clo     Clo \    ! mixing TKE
                    Nes     Nes     Nes     Nes         !  Grid 2

   LBC(isTvar) ==   RadNud     RadNud     Clo     Clo \    ! temperature
                    RadNud     RadNud     Clo     Clo \    ! salinity
                    Nes     Nes     Nes     Nes \        !  Grid 2
                    Nes     Nes     Nes     Nes         !  Grid 2

! Set lateral open boundary edge volume conservation switch for
! nonlinear model and adjoint-based algorithms. Usually activated
! with radiation boundary conditions to enforce global mass
! conservation, except if tidal forcing is enabled. [1:Ngrids].

   VolCons(west)  ==  F F                            ! western  boundary
   VolCons(east)  ==  F F                            ! eastern  boundary
   VolCons(south) ==  F F                            ! southern boundary
   VolCons(north) ==  F F                            ! northern boundary

! Time-Stepping parameters.

      NTIMES == $ntimes$ $ntimes_a$
          DT == $dt$ $dt_a$
     NDTFAST == 20 20

! Model iteration loops parameters.

       ERstr =  1
       ERend =  1
      Nouter =  1
      Ninner =  1
  Nintervals =  1

! Number of eigenvalues (NEV) and eigenvectors (NCV) to compute for the
! Lanczos/Arnoldi problem in the Generalized Stability Theory (GST)
! analysis. NCV must be greater than NEV (see documentation below).

         NEV =  2                               ! Number of eigenvalues
         NCV =  10                              ! Number of eigenvectors

! Input/Output parameters.

       NRREC == $nrrec$ $nrrec_a$
   LcycleRST == T T
        NRST == $nrst$ $nrst_a$
        NSTA == 1 1
        NFLT == 1 1
       NINFO == $ninfo$ $ninfo_a$

! Output history, average, diagnostic files parameters.

     LDEFOUT == T T
        NHIS == $nhis$ $nhis_a$
     NDEFHIS == $ndefhis$ $ndefhis_a$
      NTSAVG == 1 1
        NAVG == $nhis$ $nhis_a$
     NDEFAVG == $ndefhis$ $ndefhis_a$
      NTSDIA == 1 1
        NDIA == $nhis$ $nhis_a$
     NDEFDIA == $ndefhis$ $ndefhis_a$

! GST output and check pointing restart parameters.

   LmultiGST =  F                               ! one eigenvector per file
     LrstGST =  F                               ! GST restart switch
  MaxIterGST =  500                             ! maximum number of iterations
        NGST =  10                              ! check pointing interval

! Relative accuracy of the Ritz values computed in the GST analysis.

    Ritz_tol =  1.0d-15

! Harmonic/biharmonic horizontal diffusion of tracer for nonlinear model
! and adjoint-based algorithms: [1:NAT+NPT,Ngrids].

        TNU2 == 2*2.0d0 2*2.0d0                        ! m2/s
        TNU4 == 2*0.0d0 2*0.0d0                        ! m4/s

! Harmonic/biharmonic, horizontal viscosity coefficient for nonlinear model
! and adjoint-based algorithms: [Ngrids].

       VISC2 == 2*0.0d0                           ! m2/s
       VISC4 == 2*0.0d0                           ! m4/s

! Vertical mixing coefficients for tracers in nonlinear model and
! basic state scale factor in adjoint-based algorithms: [1:NAT+NPT,Ngrids]

     AKT_BAK == 2*5.0d-6 2*5.0d-6                   ! m2/s

! Vertical mixing coefficient for momentum for nonlinear model and
! basic state scale factor in adjoint-based algorithms: [Ngrids].

     AKV_BAK == 2*5.0d-6                          ! m2/s

! Turbulent closure parameters.

     AKK_BAK == 2*5.0d-6                          ! m2/s
     AKP_BAK == 2*5.0d-6                          ! m2/s
      TKENU2 == 2*0.0d0                           ! m2/s
      TKENU4 == 2*0.0d0                           ! m4/s

! Generic length-scale turbulence closure parameters.

       GLS_P == 2*3.0d0                           ! K-epsilon
       GLS_M == 2*1.5d0
       GLS_N == 2*-1.0d0
    GLS_Kmin == 2*7.6d-6
    GLS_Pmin == 2*1.0d-12

    GLS_CMU0 == 2*0.5477d0
      GLS_C1 == 2*1.44d0
      GLS_C2 == 2*1.92d0
     GLS_C3M == 2*-0.4d0
     GLS_C3P == 2*1.0d0
    GLS_SIGK == 2*1.0d0
    GLS_SIGP == 2*1.30d0

! Constants used in surface turbulent kinetic energy flux computation.

  CHARNOK_ALPHA == 2*1400.0d0         ! Charnok surface roughness
 ZOS_HSIG_ALPHA == 2*0.5d0            ! roughness from wave amplitude
       SZ_ALPHA == 2*0.25d0           ! roughness from wave dissipation
      CRGBAN_CW == 2*100.0d0          ! Craig and Banner wave breaking

! Constants used in momentum stress computation.

        RDRG == 2*3.0d-04                    ! m/s
       RDRG2 == 2*3.0d-03                    ! nondimensional
         Zob == 2*0.02d0                     ! m
         Zos == 2*0.02d0                     ! m

! Height (m) of atmospheric measurements for Bulk fluxes parameterization.

      BLK_ZQ == 2*2.0d0                     ! air humidity
      BLK_ZT == 2*2.0d0                     ! air temperature
      BLK_ZW == 2*10.0d0                     ! winds

! Minimum depth for wetting and drying.

       DCRIT == 2*0.10d0                     ! m

! Various parameters.

       WTYPE == 2*5
     LEVSFRC == 2*15
     LEVBFRC == 2*1

! Set vertical, terrain-following coordinates transformation equation and
! stretching function (see below for details), [1:Ngrids].

  Vtransform == 2*1                          ! transformation equation
 Vstretching == 2*1                          ! stretching function

! Vertical S-coordinates parameters (see below for details), [1:Ngrids].

     THETA_S == 2*4.0d0                      ! surface stretching parameter
     THETA_B == 2*0.8d0                      ! bottom  stretching parameter
      TCLINE == 2*0.0d0                     ! critical depth (m)

! Mean Density and Brunt-Vaisala frequency.

        RHO0 =  1023.7d0                   ! kg/m3
     BVF_BAK =  1.0d-5                     ! 1/s2

! Time-stamp assigned for model initialization, reference time
! origin for tidal forcing, and model reference time for output
! NetCDF units attribute.

      DSTART =  $dstart$.0d0
! days from TIME_REF to start of forecast day
  TIDE_START =  8035.0d0                      ! days
! TIDE_START is days from TIME_REF to 1/1/1992
    TIME_REF =  19700101.0d0                      ! yyyymmdd.dd

! Nudging/relaxation time scales, inverse scales will be computed
! internally, [1:Ngrids].

!       TNUDG == 2*3.0d0 2*3.0d0                ! days
!       ZNUDG == 2*3.0d0                      ! days
!      M2NUDG == 2*3.0d0                      ! days
!      M3NUDG == 2*3.0d0                      ! days
	  
       TNUDG == 2*3.0d0                ! days
       ZNUDG == 3.0d0                      ! days
      M2NUDG == 3.0d0                      ! days
      M3NUDG == 3.0d0                      ! days
      
! Factor between passive (outflow) and active (inflow) open boundary
! conditions, [1:Ngrids]. If OBCFAC > 1, nudging on inflow is stronger
! than on outflow (recommended).

      OBCFAC == 2*4.0d0                      ! nondimensional

! Linear equation of State parameters:

          R0 == 2*1027.0d0                   ! kg/m3
          T0 == 2*10.0d0                     ! Celsius
          S0 == 2*35.0d0                     ! nondimensional
       TCOEF == 2*1.7d-4                     ! 1/Celsius
       SCOEF == 2*7.7d-4                     ! nondimensional

! Slipperiness parameter: 1.0 (free slip) or -1.0 (no slip)

      GAMMA2 == 2*-1.0d0

! Logical switches (TRUE/FALSE) to activate horizontal momentum transport
! point Sources/Sinks (like river runoff transport) and mass point
! Sources/Sinks (like volume vertical influx), [1:Ngrids].

      LuvSrc == T                          ! horizontal momentum transport
       LwSrc == F                          ! volume vertical influx

! Logical switches (TRUE/FALSE) to activate tracers point Sources/Sinks
! (like river runoff) and to specify which tracer variables to consider:
! [1:NAT+NPT,Ngrids].  See glossary below for details.

  LtracerSrc == T T                       ! temperature, salinity, inert

! Logical switches (TRUE/FALSE) to read and process climatology fields.
! See glossary below for details.

     LsshCLM == T F                          ! sea-surface height
      Lm2CLM == T F                          ! 2D momentum
      Lm3CLM == T F                          ! 3D momentum

  LtracerCLM == T T F F                        ! temperature, salinity, inert

! Logical switches (TRUE/FALSE) to nudge the desired climatology field(s).
! If not analytical climatology fields, users need to turn ON the logical
! switches above to process the fields from the climatology NetCDF file
! that are needed for nudging. See glossary below for details.

 LnudgeM2CLM == T F                          ! 2D momentum
 LnudgeM3CLM == T F                          ! 3D momentum

  LnudgeTCLM == T T F F                        ! temperature, salinity, inert
  
! Logical switches (TRUE/FALSE) to activate writing of fields into
! HISTORY output file.

Hout(idUvel) == 2*T       ! u                  3D U-velocity
Hout(idVvel) == 2*T       ! v                  3D V-velocity
Hout(idu3dE) == 2*F       ! u_eastward         3D U-eastward  at RHO-points
Hout(idv3dN) == 2*F       ! v_northward        3D V-northward at RHO-points
Hout(idWvel) == 2*T       ! w                  3D W-velocity
Hout(idOvel) == 2*F       ! omega              omega vertical velocity
Hout(idUbar) == 2*T       ! ubar               2D U-velocity
Hout(idVbar) == 2*T       ! vbar               2D V-velocity
Hout(idu2dE) == 2*F       ! ubar_eastward      2D U-eastward  at RHO-points
Hout(idv2dN) == 2*F       ! vbar_northward     2D V-northward at RHO-points
Hout(idFsur) == 2*T       ! zeta               free-surface
Hout(idBath) == 2*F       ! bath               time-dependent bathymetry

Hout(idTvar) == 2*T 2*T     ! temp, salt         temperature and salinity

Hout(idUsms) == 2*T       ! sustr              surface U-stress
Hout(idVsms) == 2*T       ! svstr              surface V-stress
Hout(idUbms) == 2*T       ! bustr              bottom U-stress
Hout(idVbms) == 2*T       ! bvstr              bottom V-stress

Hout(idUbrs) == 2*F       ! bustrc             bottom U-current stress
Hout(idVbrs) == 2*F       ! bvstrc             bottom V-current stress
Hout(idUbws) == 2*F       ! bustrw             bottom U-wave stress
Hout(idVbws) == 2*F       ! bvstrw             bottom V-wave stress
Hout(idUbcs) == 2*F       ! bustrcwmax         bottom max wave-current U-stress
Hout(idVbcs) == 2*F       ! bvstrcwmax         bottom max wave-current V-stress

Hout(idUbot) == 2*F       ! Ubot               bed wave orbital U-velocity
Hout(idVbot) == 2*F       ! Vbot               bed wave orbital V-velocity
Hout(idUbur) == 2*F       ! Ur                 bottom U-velocity above bed
Hout(idVbvr) == 2*F       ! Vr                 bottom V-velocity above bed

Hout(idW2xx) == 2*F       ! Sxx_bar            2D radiation stress, Sxx component
Hout(idW2xy) == 2*F       ! Sxy_bar            2D radiation stress, Sxy component
Hout(idW2yy) == 2*F       ! Syy_bar            2D radiation stress, Syy component
Hout(idU2rs) == 2*F       ! Ubar_Rstress       2D radiation U-stress
Hout(idV2rs) == 2*F       ! Vbar_Rstress       2D radiation V-stress
Hout(idU2Sd) == 2*F       ! ubar_stokes        2D U-Stokes velocity
Hout(idV2Sd) == 2*F       ! vbar_stokes        2D V-Stokes velocity

Hout(idW3xx) == 2*F       ! Sxx                3D radiation stress, Sxx component
Hout(idW3xy) == 2*F       ! Sxy                3D radiation stress, Sxy component
Hout(idW3yy) == 2*F       ! Syy                3D radiation stress, Syy component
Hout(idW3zx) == 2*F       ! Szx                3D radiation stress, Szx component
Hout(idW3zy) == 2*F       ! Szy                3D radiation stress, Szy component
Hout(idU3rs) == 2*F       ! u_Rstress          3D U-radiation stress
Hout(idV3rs) == 2*F       ! v_Rstress          3D V-radiation stress
Hout(idU3Sd) == 2*F       ! u_stokes           3D U-Stokes velocity
Hout(idV3Sd) == 2*F       ! v_stokes           3D V-Stokes velocity

Hout(idWamp) == 2*F       ! Hwave              wave height
Hout(idWlen) == 2*F       ! Lwave              wave length
Hout(idWdir) == 2*F       ! Dwave              wave direction
Hout(idWptp) == 2*F       ! Pwave_top          wave surface period
Hout(idWpbt) == 2*F       ! Pwave_bot          wave bottom period
Hout(idWorb) == 2*F       ! Ub_swan            wave bottom orbital velocity
Hout(idWdis) == 2*F       ! Wave_dissip        wave dissipation

Hout(idPair) == 2*T       ! Pair               surface air pressure
Hout(idUair) == 2*T       ! Uair               surface U-wind component
Hout(idVair) == 2*T       ! Vair               surface V-wind component

Hout(idTsur) == 2*T 2*F     ! shflux, ssflux     surface net heat and salt flux
Hout(idLhea) == 2*T       ! latent             latent heat flux
Hout(idShea) == 2*T       ! sensible           sensible heat flux
Hout(idLrad) == 2*T       ! lwrad              longwave radiation flux
Hout(idSrad) == 2*T       ! swrad              shortwave radiation flux
Hout(idEmPf) == 2*T       ! EminusP            E-P flux
Hout(idevap) == 2*T       ! evaporation        evaporation rate
Hout(idrain) == 2*T       ! rain               precipitation rate

Hout(idDano) == 2*T       ! rho                density anomaly
Hout(idVvis) == 2*T       ! AKv                vertical viscosity
Hout(idTdif) == 2*F       ! AKt                vertical T-diffusion
Hout(idSdif) == 2*T       ! AKs                vertical Salinity diffusion
Hout(idHsbl) == 2*F       ! Hsbl               depth of surface boundary layer
Hout(idHbbl) == 2*F       ! Hbbl               depth of bottom boundary layer
Hout(idMtke) == 2*F       ! tke                turbulent kinetic energy
Hout(idMtls) == 2*F       ! gls                turbulent length scale

! Logical switches (TRUE/FALSE) to activate writing of extra inert passive
! tracers other than biological and sediment tracers. An inert passive tracer
! is one that it is only advected and diffused. Other processes are ignored.
! These tracers include, for example, dyes, pollutants, oil spills, etc.
! NPT values are expected. However, these switches can be activated using
! compact parameter specification.

 Hout(inert) == 2*F       ! dye_01, ...        inert passive tracers

! Logical switches (TRUE/FALSE) to activate writing of time-averaged
! fields into AVERAGE output file.

Aout(idUvel) == T       ! u                  3D U-velocity
Aout(idVvel) == T       ! v                  3D V-velocity
Aout(idu3dE) == F       ! u_eastward         3D U-eastward  at RHO-points
Aout(idv3dN) == F       ! v_northward        3D V-northward at RHO-points
Aout(idWvel) == T       ! w                  3D W-velocity
Aout(idOvel) == T       ! omega              omega vertical velocity
Aout(idUbar) == T       ! ubar               2D U-velocity
Aout(idVbar) == T       ! vbar               2D V-velocity
Aout(idu2dE) == F       ! ubar_eastward      2D U-eastward  at RHO-points
Aout(idv2dN) == F       ! vbar_northward     2D V-northward at RHO-points
Aout(idFsur) == T       ! zeta               free-surface

Aout(idTvar) == T T     ! temp, salt         temperature and salinity

Aout(idUsms) == T       ! sustr              surface U-stress
Aout(idVsms) == T       ! svstr              surface V-stress
Aout(idUbms) == T       ! bustr              bottom U-stress
Aout(idVbms) == T       ! bvstr              bottom V-stress

Aout(idW2xx) == F       ! Sxx_bar            2D radiation stress, Sxx component
Aout(idW2xy) == F       ! Sxy_bar            2D radiation stress, Sxy component
Aout(idW2yy) == F       ! Syy_bar            2D radiation stress, Syy component
Aout(idU2rs) == F       ! Ubar_Rstress       2D radiation U-stress
Aout(idV2rs) == F       ! Vbar_Rstress       2D radiation V-stress
Aout(idU2Sd) == F       ! ubar_stokes        2D U-Stokes velocity
Aout(idV2Sd) == F       ! vbar_stokes        2D V-Stokes velocity

Aout(idW3xx) == F       ! Sxx                3D radiation stress, Sxx component
Aout(idW3xy) == F       ! Sxy                3D radiation stress, Sxy component
Aout(idW3yy) == F       ! Syy                3D radiation stress, Syy component
Aout(idW3zx) == F       ! Szx                3D radiation stress, Szx component
Aout(idW3zy) == F       ! Szy                3D radiation stress, Szy component
Aout(idU3rs) == F       ! u_Rstress          3D U-radiation stress
Aout(idV3rs) == F       ! v_Rstress          3D V-radiation stress
Aout(idU3Sd) == F       ! u_stokes           3D U-Stokes velocity
Aout(idV3Sd) == F       ! v_stokes           3D V-Stokes velocity

Aout(idPair) == F       ! Pair               surface air pressure
Aout(idUair) == T       ! Uair               surface U-wind component
Aout(idVair) == T       ! Vair               surface V-wind component

Aout(idTsur) == T T     ! shflux, ssflux     surface net heat and salt flux
Aout(idLhea) == T       ! latent             latent heat flux
Aout(idShea) == T       ! sensible           sensible heat flux
Aout(idLrad) == T       ! lwrad              longwave radiation flux
Aout(idSrad) == T       ! swrad              shortwave radiation flux
Aout(idevap) == T       ! evaporation        evaporation rate
Aout(idrain) == T       ! rain               precipitation rate

Aout(idDano) == T       ! rho                density anomaly
Aout(idVvis) == F       ! AKv                vertical viscosity
Aout(idTdif) == F       ! AKt                vertical T-diffusion
Aout(idSdif) == F       ! AKs                vertical Salinity diffusion
Aout(idHsbl) == F       ! Hsbl               depth of surface boundary layer
Aout(idHbbl) == F       ! Hbbl               depth of bottom boundary layer

Aout(id2dRV) == F       ! pvorticity_bar     2D relative vorticity
Aout(id3dRV) == F       ! pvorticity         3D relative vorticity
Aout(id2dPV) == F       ! rvorticity_bar     2D potential vorticity
Aout(id3dPV) == F       ! rvorticity         3D potential vorticity

Aout(idu3dD) == F       ! u_detided          detided 3D U-velocity
Aout(idv3dD) == F       ! v_detided          detided 3D V-velocity
Aout(idu2dD) == F       ! ubar_detided       detided 2D U-velocity
Aout(idv2dD) == F       ! vbar_detided       detided 2D V-velocity
Aout(idFsuD) == F       ! zeta_detided       detided free-surface

Aout(idTrcD) == F F     ! temp_detided, ...  detided temperature and salinity

Aout(idHUav) == T       ! Huon               u-volume flux, Huon
Aout(idHVav) == T       ! Hvom               v-volume flux, Hvom
Aout(idUUav) == T       ! uu                 quadratic <u*u> term
Aout(idUVav) == F       ! uv                 quadratic <u*v> term
Aout(idVVav) == T       ! vv                 quadratic <v*v> term
Aout(idU2av) == T       ! ubar2              quadratic <ubar*ubar> term
Aout(idV2av) == T       ! vbar2              quadratic <vbar*vbar> term
Aout(idZZav) == T       ! zeta2              quadratic <zeta*zeta> term

Aout(idTTav) == F F     ! temp2, salt2       quadratic <t*t> T/S terms
Aout(idUTav) == F F     ! utemp, usalt       quadratic <u*t> T/S terms
Aout(idVTav) == F F     ! vtemp, vsalt       quadratic <v*t> T/S terms
Aout(iHUTav) == T T     ! Huontemp, ...      T/S volume flux, <Huon*t>
Aout(iHVTav) == T T     ! Hvomtemp, ...      T/S volume flux, <Hvom*t>

! Logical switches (TRUE/FALSE) to activate writing of extra inert passive
! tracers other than biological and sediment tracers into the AVERAGE file.

 Aout(inert) == F F F F F       ! dye_01, ...        inert passive tracers

! Logical switches (TRUE/FALSE) to activate writing of time-averaged,
! 2D momentum (ubar,vbar) diagnostic terms into DIAGNOSTIC output file.

Dout(M2rate) == T       ! ubar_accel, ...    acceleration
Dout(M2pgrd) == T       ! ubar_prsgrd, ...   pressure gradient
Dout(M2fcor) == T       ! ubar_cor, ...      Coriolis force
Dout(M2hadv) == T       ! ubar_hadv, ...     horizontal total advection
Dout(M2xadv) == T       ! ubar_xadv, ...     horizontal XI-advection
Dout(M2yadv) == T       ! ubar_yadv, ...     horizontal ETA-advection
Dout(M2hrad) == T       ! ubar_hrad, ...     horizontal total radiation stress
Dout(M2hvis) == T       ! ubar_hvisc, ...    horizontal total viscosity
Dout(M2xvis) == T       ! ubar_xvisc, ...    horizontal XI-viscosity
Dout(M2yvis) == T       ! ubar_yvisc, ...    horizontal ETA-viscosity
Dout(M2sstr) == T       ! ubar_sstr, ...     surface stress
Dout(M2bstr) == T       ! ubar_bstr, ...     bottom stress

! Logical switches (TRUE/FALSE) to activate writing of time-averaged,
! 3D momentum (u,v) diagnostic terms into DIAGNOSTIC output file.

Dout(M3rate) == T       ! u_accel, ...       acceleration
Dout(M3pgrd) == T       ! u_prsgrd, ...      pressure gradient
Dout(M3fcor) == T       ! u_cor, ...         Coriolis force
Dout(M3hadv) == T       ! u_hadv, ...        horizontal total advection
Dout(M3xadv) == T       ! u_xadv, ...        horizontal XI-advection
Dout(M3yadv) == T       ! u_yadv, ...        horizontal ETA-advection
Dout(M3vadv) == T       ! u_vadv, ...        vertical advection
Dout(M3hrad) == T       ! u_hrad, ...        horizontal total radiation stress
Dout(M3vrad) == T       ! u_vrad, ...        vertical radiation stress
Dout(M3hvis) == T       ! u_hvisc, ...       horizontal total viscosity
Dout(M3xvis) == T       ! u_xvisc, ...       horizontal XI-viscosity
Dout(M3yvis) == T       ! u_yvisc, ...       horizontal ETA-viscosity
Dout(M3vvis) == T       ! u_vvisc, ...       vertical viscosity

! Logical switches (TRUE/FALSE) to activate writing of time-averaged,
! active (temperature and salinity) and passive (inert) tracer diagnostic
! terms into DIAGNOSTIC output file: [1:NAT+NPT,Ngrids].

Dout(iTrate) == T T     ! temp_rate, ...     time rate of change
Dout(iThadv) == T T     ! temp_hadv, ...     horizontal total advection
Dout(iTxadv) == T T     ! temp_xadv, ...     horizontal XI-advection
Dout(iTyadv) == T T     ! temp_yadv, ...     horizontal ETA-advection
Dout(iTvadv) == T T     ! temp_vadv, ...     vertical advection
Dout(iThdif) == T T     ! temp_hdiff, ...    horizontal total diffusion
Dout(iTxdif) == T T     ! temp_xdiff, ...    horizontal XI-diffusion
Dout(iTydif) == T T     ! temp_ydiff, ...    horizontal ETA-diffusion
Dout(iTsdif) == T T     ! temp_sdiff, ...    horizontal S-diffusion
Dout(iTvdif) == T T     ! temp_vdiff, ...    vertical diffusion

! Generic User parameters, [1:NUSER].

       NUSER =  0
        USER =  0.d0

! NetCDF-4/HDF5 compression parameters for output files.

  NC_SHUFFLE =  1                 ! if non-zero, turn on shuffle filter
  NC_DEFLATE =  1                 ! if non-zero, turn on deflate filter
   NC_DLEVEL =  1                 ! deflate level [0-9]

! Input NetCDF file names, [1:Ngrids].

     GRDNAME == $grid_dir$grid.nc \
  $grid_dir_a$grid.nc
     ININAME == $ini_fullname$ \
  $ini_fullname_a$

! Nesting grids connectivity data: contact points information. This
! NetCDF file is special and complex. It is currently generated using
! the script "matlab/grid/contact.m" from the Matlab repository.

     NGCNAME =  $grid_dir_a$contacts.nc

! Input lateral boundary conditions and climatology file names.  The
! USER has the option to split input data time records into several
! NetCDF files (see prologue instructions above). If so, use a single
! line per entry with a vertical bar (|) symbol after each entry,
! except the last one.

     BRYNAME == $force_dir$$ocn_dir$ocean_bry$bio_tag$.nc
     CLMNAME == $force_dir$$ocn_dir$ocean_clm$bio_tag$.nc

! Input climatology nudging coefficients file name.
     NUDNAME == $grid_dir$nudgcoef.nc

! Input Sources/Sinks forcing (like river runoff) file name.

     SSFNAME == $force_dir$$riv_dir$rivers$bio_tag$.nc

     NFFILES == 9 8                          ! number of unique forcing files

     FRCNAME == $force_dir$$tide_dir$tides.nc \
  $force_dir$$atm_dir$lwrad_down.nc \
  $force_dir$$atm_dir$Pair.nc \
  $force_dir$$atm_dir$Qair.nc \
  $force_dir$$atm_dir$rain.nc \
  $force_dir$$atm_dir$swrad.nc \
  $force_dir$$atm_dir$Tair.nc \
  $force_dir$$atm_dir$Uwind.nc \
  $force_dir$$atm_dir$Vwind.nc \
  $force_dir_a$$atm_dir$lwrad_down.nc \
  $force_dir_a$$atm_dir$Pair.nc \
  $force_dir_a$$atm_dir$Qair.nc \
  $force_dir_a$$atm_dir$rain.nc \
  $force_dir_a$$atm_dir$swrad.nc \
  $force_dir_a$$atm_dir$Tair.nc \
  $force_dir_a$$atm_dir$Uwind.nc \
  $force_dir_a$$atm_dir$Vwind.nc  

! Output NetCDF file names, [1:Ngrids].

     RSTNAME == $out_dir$ocean_rst.nc \
  $out_dir$ocean_rst_a.nc
     HISNAME == $out_dir$ocean_his.nc \
  $out_dir$ocean_his_a.nc
     AVGNAME == $out_dir$ocean_avg.nc \
  $out_dir$ocean_avg_a.nc
     DIANAME == $out_dir$ocean_dia.nc \
  $out_dir$ocean_dia_a.nc

! Input ASCII parameter filenames.
     BPARNAM = $dot_in_dir$npzd2o_Banas.in     



